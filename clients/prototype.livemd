# Elixoids Ship

```elixir
:ok = Mix.install([{:gun, "~> 2.0", hex: :grpc_gun}, {:jason, "~> 1.4"}])
```

## Behaviour

```elixir
defmodule Elixoids.ShipBehaviour do
  @callback handle_frame(ships :: list, asteroids :: list, theta :: number, state :: map) ::
              Keyword.t()
end
```

```elixir
defmodule Elixoids.GenShip do
  defmacro __using__(_) do
    quote do
      use GenServer

      @behaviour Elixoids.ShipBehaviour

      @ship_keys [:tag, :theta, :distance]
      @rock_keys [:id, :theta, :radius, :distance]

      def init(_arg) do
        state = %{ws_pid: nil, connected: false, ref: nil, state: %{}}
        {:ok, state, {:continue, :connect}}
      end

      def handle_continue(:connect, state) do
        case :gun.open('localhost', 8065) do
          {:ok, pid} ->
            {:noreply, %{state | ws_pid: pid}}

          e ->
            {:stop, {:error, e}, state}
        end
      end

      def handle_info({:gun_up, pid, _protocol}, state) do
        ref = :gun.ws_upgrade(pid, "/0/ship/GRI")
        {:noreply, %{state | connected: true, ref: ref}}
      end

      def handle_info({:gun_down, _pid, _protocol, reason, []}, state) do
        {:stop, reason, state}
      end

      def handle_info({:gun_ws, _pid, _ref, {:text, text_frame}}, %{state: client_state} = state) do
        to_maps = fn keys ->
          fn rows ->
            for row <- rows, do: Map.new(Enum.zip(keys, row))
          end
        end

        %{"ships" => ships, "asteroids" => asteroids, "theta" => theta} =
          text_frame
          |> Jason.decode!()
          |> Map.update("rocks", [], to_maps.(@rock_keys))
          |> Map.update("ships", [], to_maps.(@ship_keys))

        case handle_frame(ships, asteroids, theta, client_state) do
          {:ok, new_client_state} ->
            new_state = %{state | client_state: new_client_state}
            {:noreply, new_state}

          {:error, :stop} ->
            {:stop, :normal}

          _ ->
            {:noreply, state}
        end
      end

      def handle_info(_msg, state), do: {:noreply, state}

      def handle_frame(_ships, _asteroids, _theta, state), do: {:ok, state}
      defoverridable handle_frame: 4
    end
  end
end
```

## GenServer

```elixir
defmodule Elixoids.Ship.Client do
  use Elixoids.GenShip

  def start_link(_), do: GenServer.start_link(__MODULE__, [])
end

{:ok, _pid} = GenServer.start_link(Elixoids.Ship.Client, [])
```

```elixir
# Supervised ship will reconnect

children = [
  {Elixoids.Ship.Client, []}
]

Supervisor.start_link(children, strategy: :one_for_one)
```

## Run

```elixir
{:ok, _} = Application.ensure_all_started(:gun)
```

## Decode game frame

Sample:

```json
"{\"rocks\":[[1,1.021,120.0,1088.0],[2,0.532,120.0,1511.0],[3,1.328,120.0,955.0],[4,1.547,120.0,704.0],[6,5.761,120.0,205.0]],\"ships\":[],\"theta\":0.0}"}
```

```elixir
text =
  "{\"rocks\":[[1,1.021,120.0,1088.0],[2,0.532,120.0,1511.0],[3,1.328,120.0,955.0],[4,1.547,120.0,704.0],[6,5.761,120.0,205.0]],\"ships\":[],\"theta\":0.0}"

%{"rocks" => rocks, "ships" => ships, "theta" => theta} = Jason.decode!(text)
rocks
```

## Rock

```elixir
keys = [:id, :theta, :radius, :distance]
record = [1, 1.021, 120.0, 1088.0]

Enum.zip(keys, record)
```

## Ship

```elixir
keys = [:tag, :theta, :distance]
record = ["SÄŒR", 2.196, 1895.0]

Map.new(Enum.zip(keys, record))
```
